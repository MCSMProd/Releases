name: Sync Release from Target Repo

on:
  workflow_dispatch:

permissions:
  contents: write # 允许提交与推送 tag

env:
  TARGET_REPO: MCSManager/MCSManager # TODO: 替换为目标仓库（例如: myorg/myrepo）
  NODE_VERSION: 20
  REGISTRY_URL: https://registry.npmjs.org
  TEMP_DIR: ./temp-pkg

jobs:
  sync-release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout current repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # 需要推送 tag
      
      - name: Use Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: ${{ env.REGISTRY_URL }}

      - name: Ensure jq available
        run: |
          if ! command -v jq >/dev/null 2>&1; then
            sudo apt-get update && sudo apt-get install -y jq
          fi

      - name: Set up Git
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"

      - name: Get latest release info
        id: get_release
        env:
          TARGET_REPO: ${{ env.TARGET_REPO }}
        run: |
            MAX_RETRIES=5
            RETRY_DELAY=3
        
            for i in $(seq 1 $MAX_RETRIES); do
              echo "Attempt $i..."
              RELEASE_INFO="$(curl -s "https://api.github.com/repos/${TARGET_REPO}/releases/latest")"
              TAG="$(echo "$RELEASE_INFO" | jq -r '.tag_name')"
              ID="$(echo "$RELEASE_INFO" | jq -r '.id')"
        
              if [ "$TAG" != "null" ] && [ -n "$TAG" ]; then
                echo "✅ Latest tag: $TAG (id: $ID)"
                echo "tag=$TAG" >> $GITHUB_OUTPUT
                exit 0
              fi
        
              echo "⚠️ tag_name is null, retrying in ${RETRY_DELAY}s..."
              sleep $RETRY_DELAY
            done
        
            echo "❌ Failed to get a valid release tag after $MAX_RETRIES attempts"
            exit 1

      - name: Check if already processed
        id: check_tag
        run: |
          LAST_TAG="$(cat .last_release_tag 2>/dev/null || echo "none")"
          CUR_TAG="${{ steps.get_release.outputs.tag }}"
          echo "Last processed: $LAST_TAG"
          if [ "$LAST_TAG" = "$CUR_TAG" ]; then
            echo "skip=true" >> $GITHUB_OUTPUT
          else
            echo "skip=false" >> $GITHUB_OUTPUT
          fi

      - name: Exit when no update
        if: steps.check_tag.outputs.skip == 'true'
        run: echo "No new release. Exit."

      - name: Clean repo except .git, .github and LICENSE
        if: steps.check_tag.outputs.skip == 'false'
        shell: bash
        run: |
          shopt -s dotglob nullglob
          for path in ./*; do
            base="$(basename "$path")"
            if [ "$base" = ".git" ] || [ "$base" = ".github" ] || [ "$base" = "LICENSE" ]; then
              echo "Keep: $path"
              continue
            fi
            echo "Remove: $path"
            rm -rf "$path"
          done

      - name: Install Git LFS
        if: steps.check_tag.outputs.skip == 'false'
        run: |
          sudo apt-get update && sudo apt-get install -y git-lfs
          git lfs install

      - name: Download release assets to temp dir
        if: steps.check_tag.outputs.skip == 'false'
        run: |
          RELEASE_INFO="$(curl -s "https://api.github.com/repos/${TARGET_REPO}/releases/latest")"
          mkdir -p assets_tmp
          COUNT="$(echo "$RELEASE_INFO" | jq '.assets | length')"
          echo "Assets count: $COUNT"
          if [ "$COUNT" -gt 0 ]; then
            echo "$RELEASE_INFO" | jq -r '.assets[] | @base64' | while read -r row; do
              _jq() { echo "$row" | base64 --decode | jq -r "$1"; }
              NAME="$(_jq '.name')"
              URL="$(_jq '.browser_download_url')"
              echo "Downloading: $NAME"
              curl -L "$URL" -o "assets_tmp/$NAME"
            done
          else
            echo "No assets in this release. Proceeding without downloads."
          fi

      - name: Move assets into repo root
        if: steps.check_tag.outputs.skip == 'false'
        run: |
          shopt -s dotglob nullglob
          if compgen -G "assets_tmp/*" > /dev/null; then
            cp -r assets_tmp/* .
          fi

      - name: Save processed release tag
        if: steps.check_tag.outputs.skip == 'false'
        run: echo "${{ steps.get_release.outputs.tag }}" > .last_release_tag

      - name: Detect and track large files with Git LFS
        if: steps.check_tag.outputs.skip == 'false'
        run: |
          MAX_SIZE=$((50 * 1024 * 1024))
          LARGE_FILES=$(find . -type f ! -path "./.git/*" ! -path "./.github/*" -size +"${MAX_SIZE}c")

          echo "" > .gitattributes

          if [ -n "$LARGE_FILES" ]; then
            echo "以下文件超过 50MB，使用 Git LFS 追踪："
            echo "$LARGE_FILES"
            echo "$LARGE_FILES" | while read -r file; do
              git lfs track "$file"
            done
            git add .gitattributes
          else
            echo "没有文件超过 50MB，无需 LFS"
          fi

      - name: Commit changes
        if: steps.check_tag.outputs.skip == 'false'
        run: |
          git add -A
          if git diff --cached --quiet; then
            echo "No changes to commit."
          else
            git commit -m "Sync release ${{ steps.get_release.outputs.tag }}"
          fi

      - name: Tag and push
        if: steps.check_tag.outputs.skip == 'false'
        env:
          TAG: ${{ steps.get_release.outputs.tag }}
        run: |
          if git rev-parse -q --verify "refs/tags/$TAG" >/dev/null; then
            git tag -f "$TAG"
          else
            git tag "$TAG"
          fi
          git push origin HEAD
          git push origin --force "$TAG"

      - name: Prepare package
        if: steps.check_tag.outputs.skip == 'false'
        env:
          TAG: ${{ steps.get_release.outputs.tag }}
        run: |
          mkdir -p $TEMP_DIR
          cp -r assets_tmp/* $TEMP_DIR/

          cat > $TEMP_DIR/package.json <<EOF
          {
            "name": "mcsmanager-resources",
            "version": "$TAG",
            "description": "MCSManager Resources",
            "license": "Apache-2.0"
          }
          EOF

      - name: Publish to npm
        if: steps.check_tag.outputs.skip == 'false'
        run: npm publish
        working-directory: ${{ env.TEMP_DIR }}
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
